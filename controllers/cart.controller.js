const Cart = require('../models/cart.model');
const CartItem = require('../models/cartItem.model');
const Product = require('../models/product.model');
const Topping = require('../models/topping.model');
const Discount = require('../models/discount.model');
const UserDiscount = require('../models/userDiscount.model');

const DELIVERY_FEE = 10000;

const calculateCartTotals = async (cartItemIds) => {
  const items = await CartItem.find({ _id: { $in: cartItemIds } })
    .populate('productId')
    .populate('toppings');

  let subtotal = 0;
  const result = [];

  for (const item of items) {
    const product = item.productId;
    const multiplier = item.size === 'S' ? 0.8 : item.size === 'L' ? 1.3 : 1.0;
    const basePrice = product.basePrice * multiplier;
    const toppingCost = item.toppings.reduce((sum, t) => sum + t.price, 0);
    const itemTotal = (basePrice + toppingCost) * item.quantity;

    subtotal += itemTotal;

    result.push({
      _id: item._id,
      name: product.name,
      image: product.image,
      size: item.size,
      quantity: item.quantity,
      toppings: item.toppings,
      unitPrice: basePrice + toppingCost,
      total: itemTotal
    });
  }

  return { items: result, subtotal };
};

// üü¢ Add item to cart (updated)
exports.addToCart = async (req, res) => {
  try {
    const { productId, size, toppings = [], quantity } = req.body;
    const userId = req.user._id;

    const newItem = await CartItem.create({
      userId, productId, size, toppings, quantity
    });

    let cart = await Cart.findOne({ userId });
    if (!cart) {
      cart = await Cart.create({ userId, cartItems: [newItem._id] });
    } else {
      cart.cartItems.push(newItem._id);
    }

    await cart.save();

    // Populate full cartItems with product details
    const populatedCart = await Cart.findById(cart._id)
      .populate({
        path: 'cartItems',
        populate: {
          path: 'productId',
          populate: ['categoryId', 'sizeOptions', 'toppingOptions']
        }
      });

    const { items, subtotal } = await calculateCartTotals(populatedCart.cartItems);
    populatedCart.subtotal = subtotal;
    populatedCart.total = subtotal + populatedCart.deliveryFee - populatedCart.discount;
    await populatedCart.save();

    res.status(201).json({
      message: 'ƒê√£ th√™m v√†o gi·ªè h√†ng',
      items,                   // array of detailed CartItem
      subtotal,
      deliveryFee: populatedCart.deliveryFee,
      discount: populatedCart.discount,
      total: populatedCart.total
    });
  } catch (err) {
    console.error('[addToCart]', err);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng' });
  }
};


// üü° Get full cart
// exports.getCart = async (req, res) => {
//     try {
//       const cart = await Cart.findOne({ userId: req.user._id }).populate('cartItems');

//       console.log(cart)
//       console.log('Hello world')

//       if (!cart) {
//         return res.status(200).json({
//           items: [],
//           subtotal: 0,
//           deliveryFee: DELIVERY_FEE,
//           discount: 0,
//           total: 0
//         });
//       }
  
//       const { items, subtotal } = await calculateCartTotals(cart.cartItems);
//       cart.subtotal = subtotal;
//       cart.total = subtotal + cart.deliveryFee - cart.discount;
//       await cart.save();
  
//       res.status(200).json({
//         items,
//         subtotal,
//         deliveryFee: cart.deliveryFee,
//         discount: cart.discount,
//         total: cart.total
//       });
//     } catch (err) {
//       console.error('[getCart]', err);
//       res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y gi·ªè h√†ng' });
//     }
//   };
  
exports.getCart = async (req, res) => {
  try {
    const cart = await Cart.findOne({ userId: req.user._id }).populate('cartItems');

    // console.log(cart) // ƒê·ªÉ l·∫°i console.log ƒë·ªÉ debug n·∫øu c·∫ßn
    // console.log('Hello world') // C√≥ th·ªÉ x√≥a d√≤ng n√†y

    if (!cart) {
      return res.status(200).json({
        items: [],
        subtotal: 0,
        deliveryFee: DELIVERY_FEE,
        discount: 0,
        total: 0,
        promoCode: '' // ‚úÖ TR·∫¢ V·ªÄ promoCode m·∫∑c ƒë·ªãnh khi gi·ªè h√†ng r·ªóng
      });
    }

    const { items, subtotal } = await calculateCartTotals(cart.cartItems);
    
    // C·∫≠p nh·∫≠t gi·ªè h√†ng v·ªõi subtotal m·ªõi v√† t√≠nh l·∫°i total.
    // ƒêi·ªÅu n√†y l√† quan tr·ªçng ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu lu√¥n ƒë∆∞·ª£c t√≠nh to√°n l·∫°i ch√≠nh x√°c
    // m·ªói khi gi·ªè h√†ng ƒë∆∞·ª£c truy xu·∫•t, ƒë·∫∑c bi·ªát n·∫øu gi√° s·∫£n ph·∫©m ho·∫∑c s·ªë l∆∞·ª£ng thay ƒë·ªïi
    // m√† kh√¥ng th√¥ng qua API c·∫≠p nh·∫≠t gi·ªè h√†ng tr·ª±c ti·∫øp.
    cart.subtotal = subtotal;
    // ƒê·∫£m b·∫£o total ƒë∆∞·ª£c t√≠nh ƒë√∫ng: subtotal + deliveryFee - discount
    cart.total = subtotal + cart.deliveryFee - cart.discount; 
    
    await cart.save(); // L∆∞u l·∫°i c√°c c·∫≠p nh·∫≠t subtotal v√† total

    res.status(200).json({
      items,
      subtotal,
      deliveryFee: cart.deliveryFee,
      discount: cart.discount,
      total: cart.total,
      promoCode: cart.promoCode || '' // ‚úÖ TR·∫¢ V·ªÄ promoCode t·ª´ gi·ªè h√†ng
    });
  } catch (err) {
    console.error('[getCart]', err);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y gi·ªè h√†ng' });
  }
};



// üü† Remove 1 CartItem
exports.removeCartItem = async (req, res) => {
  try {
    const userId = req.user._id;
    const cart = await Cart.findOne({ userId });
    if (!cart) return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng' });

    cart.cartItems = cart.cartItems.filter(itemId => itemId.toString() !== req.params.itemId);
    await CartItem.findByIdAndDelete(req.params.itemId);

    const { subtotal } = await calculateCartTotals(cart.cartItems);
    cart.subtotal = subtotal;
    cart.total = subtotal + cart.deliveryFee - cart.discount;
    await cart.save();

    res.status(200).json({ message: 'ƒê√£ xo√° s·∫£n ph·∫©m', cart });
  } catch (err) {
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng' });
  }
};

// üî¥ Clear entire cart
// exports.clearCart = async (req, res) => {
//   try {
//     const userId = req.user._id;
//     const cart = await Cart.findOne({ userId });
//     if (cart) {
//       await CartItem.deleteMany({ _id: { $in: cart.cartItems } });
//       cart.cartItems = [];
//       cart.subtotal = 0;
//       cart.total = DELIVERY_FEE;
//       await cart.save();
//     }

//     res.status(200).json({ message: 'ƒê√£ xo√° to√†n b·ªô gi·ªè h√†ng' });
//   } catch (err) {
//     res.status(500).json({ error: 'Kh√¥ng th·ªÉ xo√° gi·ªè h√†ng' });
//   }
// };
// exports.clearCart = async (req, res) => {
//   try {
//     const userId = req.user._id; // L·∫•y userId t·ª´ req.user (ƒë·∫£m b·∫£o middleware auth ho·∫°t ƒë·ªông)

//     const cart = await Cart.findOne({ userId });

//     if (!cart) {
//       // N·∫øu kh√¥ng t√¨m th·∫•y gi·ªè h√†ng, tr·∫£ v·ªÅ tr·∫°ng th√°i r·ªóng v√† th√†nh c√¥ng.
//       return res.status(200).json({
//         message: 'Gi·ªè h√†ng ƒë√£ tr·ªëng.',
//         items: [],
//         subtotal: 0,
//         discount: 0,
//         total: 0,
//         deliveryFee: 10000, // Ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh c·ªßa b·∫°n
//         taxRate: 0.01 // Ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh c·ªßa b·∫°n
//       });
//     }

//     // --- X·ª≠ l√Ω UserDiscount v√† m√£ gi·∫£m gi√° ƒë√£ √°p d·ª•ng ---
//     if (cart.promotionCode) { // Gi·∫£ s·ª≠ b·∫°n l∆∞u `promotionCode` trong Cart model khi √°p d·ª•ng
//       const discount = await Discount.findOne({ promotionCode: cart.promotionCode });

//       if (discount) {
//         // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i `isUsed: false` cho UserDiscount
//         await UserDiscount.updateOne(
//           { userId, discountId: discount._id },
//           { $set: { isUsed: false } }
//         );
//         console.log(`UserDiscount for user ${userId} and discount ${discount._id} was reset to isUsed: false.`);

//         // ‚ùå B·ªè d√≤ng x√≥a UserDiscount kh·ªèi collection theo y√™u c·∫ßu m·ªõi c·ªßa b·∫°n
//         // await UserDiscount.deleteOne({ userId, discountId: discount._id });
//         // console.log(`UserDiscount for user ${userId} and discount ${discount._id} was deleted.`);
//       }
//     }

//     // --- X√≥a t·∫•t c·∫£ CartItem t∆∞∆°ng ·ª©ng trong collection CartItem ---
//     if (cart.cartItems && cart.cartItems.length > 0) {
//       await CartItem.deleteMany({ _id: { $in: cart.cartItems } });
//       console.log(`Deleted ${cart.cartItems.length} CartItems for cart ${cart._id}.`);
//     }

//     // --- X√≥a gi·ªè h√†ng ch√≠nh kh·ªèi database ---
//     await Cart.deleteOne({ userId });
//     console.log(`Cart for user ${userId} was deleted.`);

//     // Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng gi·ªè h√†ng tr·ªëng kh·ªõp v·ªõi CartApiResponse c·ªßa frontend
//     res.status(200).json({
//       message: 'Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a v√† m√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i.',
//       items: [], // M·∫£ng s·∫£n ph·∫©m tr·ªëng
//       subtotal: 0,
//       discount: 0,
//       total: 0,
//       deliveryFee: 10000, // Tr·∫£ v·ªÅ ph√≠ ship m·∫∑c ƒë·ªãnh c·ªßa b·∫°n
//       taxRate: 0.01 // Tr·∫£ v·ªÅ thu·∫ø su·∫•t m·∫∑c ƒë·ªãnh c·ªßa b·∫°n
//     });

//   } catch (err) {
//     console.error('[Clear Cart Error]', err);
//     res.status(500).json({ error: 'Kh√¥ng th·ªÉ x√≥a gi·ªè h√†ng: ' + err.message });
//   }
// };

exports.clearCart = async (req, res) => {
  try {
    const userId = req.user._id;

    const cart = await Cart.findOne({ userId });

    if (!cart) {
      return res.status(200).json({
        message: 'Gi·ªè h√†ng ƒë√£ tr·ªëng.',
        items: [],
        subtotal: 0,
        discount: 0,
        total: 0,
        deliveryFee: DELIVERY_FEE, // S·ª≠ d·ª•ng h·∫±ng s·ªë
        taxRate: 0.01,
        promoCode: '' // ƒê·∫£m b·∫£o tr·∫£ v·ªÅ promoCode r·ªóng
      });
    }

    // --- X·ª≠ l√Ω UserDiscount v√† m√£ gi·∫£m gi√° ƒë√£ √°p d·ª•ng ---
    if (cart.promoCode) { // ‚úÖ S·ª¨ D·ª§NG cart.promoCode t·ª´ Cart model
      const discount = await Discount.findOne({ promotionCode: cart.promoCode });

      if (discount) {
        const userDiscountUpdateResult = await UserDiscount.updateOne(
          { userId: userId, discountId: discount._id, isUsed: true },
          { $set: { isUsed: false } }
        );

        if (userDiscountUpdateResult.modifiedCount > 0) {
          console.log(`UserDiscount for user ${userId} and discount ${discount._id} was successfully reset to isUsed: false.`);
        } else {
          console.log(`UserDiscount for user ${userId} and discount ${discount._id} not found or already reset (isUsed: false).`);
        }
      } else {
          console.log(`Discount not found for promoCode: ${cart.promoCode}. Cannot reset UserDiscount.`);
      }
      // Sau khi x·ª≠ l√Ω UserDiscount, ƒë·∫£m b·∫£o x√≥a promoCode kh·ªèi gi·ªè h√†ng
      cart.promoCode = ''; // ‚úÖ Reset promoCode trong cart v·ªÅ r·ªóng
      await cart.save(); // L∆∞u thay ƒë·ªïi cho cart
    }

    // --- X√≥a t·∫•t c·∫£ CartItem t∆∞∆°ng ·ª©ng trong collection CartItem ---
    if (cart.cartItems && cart.cartItems.length > 0) {
      await CartItem.deleteMany({ _id: { $in: cart.cartItems } });
      console.log(`Deleted ${cart.cartItems.length} CartItems for cart ${cart._id}.`);
    }

    // --- X√≥a gi·ªè h√†ng ch√≠nh kh·ªèi database ---
    await Cart.deleteOne({ userId });
    console.log(`Cart for user ${userId} was deleted.`);

    // Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng gi·ªè h√†ng tr·ªëng kh·ªõp v·ªõi CartApiResponse c·ªßa frontend
    res.status(200).json({
      message: 'Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a v√† m√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i.',
      items: [],
      subtotal: 0,
      discount: 0,
      total: 0,
      deliveryFee: DELIVERY_FEE, // S·ª≠ d·ª•ng h·∫±ng s·ªë
      taxRate: 0.01,
      promoCode: '' // ƒê·∫£m b·∫£o tr·∫£ v·ªÅ promoCode r·ªóng
    });

  } catch (err) {
    console.error('[Clear Cart Error]', err);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ x√≥a gi·ªè h√†ng: ' + err.message });
  }
};


// Apply discount to cart


// ‚úÖ √Åp d·ª•ng m√£ gi·∫£m gi√° v√†o gi·ªè h√†ng
// exports.applyDiscountToCart = async (req, res) => {
//   try {
//     const { promotionCode } = req.body;
//     const userId = req.user._id;

//     const cart = await Cart.findOne({ userId }).populate('cartItems');
//     if (!cart) return res.status(400).json({ error: 'Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng' });

//     const discount = await Discount.findOne({ promotionCode });
//     if (!discount) return res.status(404).json({ error: 'M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá' });

//     if (discount.isLock) return res.status(400).json({ error: 'M√£ gi·∫£m gi√° ƒë√£ b·ªã kho√°' });
//     if (discount.expiryDate < new Date()) return res.status(400).json({ error: 'M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n' });

//     const userDiscount = await UserDiscount.findOne({ userId, discountId: discount._id });
//     if (userDiscount?.isUsed) return res.status(400).json({ error: 'B·∫°n ƒë√£ s·ª≠ d·ª•ng m√£ n√†y' });

//     const subtotal = cart.subtotal || (await calculateCartTotals(cart.cartItems)).subtotal;

//     if (subtotal < discount.minOrder) {
//       return res.status(400).json({ error: `ƒê∆°n h√†ng ch∆∞a ƒë·∫°t t·ªëi thi·ªÉu ${discount.minOrder.toLocaleString()}ƒë` });
//     }

//     // √Åp d·ª•ng gi·∫£m
//     const discountAmount = Math.round(subtotal * (discount.discountPercent / 100));
//     cart.discount = discountAmount;
//     cart.total = subtotal + cart.deliveryFee - discountAmount;

//     console.log('========================');
//     console.log(promotionCode)
//     console.log(cart);
//     await cart.save();

//     // Ghi nh·∫≠n ng∆∞·ªùi d√πng ƒë√£ d√πng m√£
//     await UserDiscount.updateOne(
//       { userId, discountId: discount._id },
//       { $set: { isUsed: true } },
//       { upsert: true }
//     );

//     res.status(200).json({
//       message: '√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng',
//       discountAmount,
//       total: cart.total
//     });
//   } catch (err) {
//     console.error('[Apply Discount]', err);
//     res.status(500).json({ error: 'Kh√¥ng th·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√°' });
//   }
// };

// exports.applyDiscountToCart = async (req, res) => {
//   try {
//     const { promotionCode } = req.body; // frontend g·ª≠i l√† promotionCode
//     const userId = req.user._id;

//     const cart = await Cart.findOne({ userId }).populate('cartItems');
//     if (!cart) return res.status(400).json({ error: 'Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng' });

//     const discount = await Discount.findOne({ promotionCode });
//     if (!discount) return res.status(404).json({ error: 'M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá' });

//     if (discount.isLock) return res.status(400).json({ error: 'M√£ gi·∫£m gi√° ƒë√£ b·ªã kho√°' });
//     if (discount.expiryDate < new Date()) return res.status(400).json({ error: 'M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n' });

//     const userDiscount = await UserDiscount.findOne({ userId, discountId: discount._id });
//     if (userDiscount?.isUsed) return res.status(400).json({ error: 'B·∫°n ƒë√£ s·ª≠ d·ª•ng m√£ n√†y' });

//     const subtotal = cart.subtotal || (await calculateCartTotals(cart.cartItems)).subtotal;

//     if (subtotal < discount.minOrder) {
//       return res.status(400).json({ error: `ƒê∆°n h√†ng ch∆∞a ƒë·∫°t t·ªëi thi·ªÉu ${discount.minOrder.toLocaleString()}ƒë` });
//     }

//     // --- √Åp d·ª•ng gi·∫£m v√† l∆∞u v√†o Cart ---
//     const discountAmount = Math.round(subtotal * (discount.discountPercent / 100));
//     cart.discount = discountAmount;
//     cart.total = subtotal + cart.deliveryFee - discountAmount;
//     cart.promoCode = promotionCode; // ‚úÖ L∆ØU promotionCode v√†o tr∆∞·ªùng promoCode c·ªßa Cart model

//     await cart.save();

//     // Ghi nh·∫≠n ng∆∞·ªùi d√πng ƒë√£ d√πng m√£
//     await UserDiscount.updateOne(
//       { userId, discountId: discount._id },
//       { $set: { isUsed: true } },
//       { upsert: true }
//     );

//     // ‚úÖ Tr·∫£ v·ªÅ to√†n b·ªô th√¥ng tin gi·ªè h√†ng ƒë√£ c·∫≠p nh·∫≠t
//     // ƒê·∫£m b·∫£o kh·ªõp v·ªõi CartApiResponse ·ªü frontend
//     res.status(200).json({
//       message: '√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng',
//       items: (await calculateCartTotals(cart.cartItems)).items, // C·∫ßn tr·∫£ v·ªÅ items ƒë·∫ßy ƒë·ªß
//       subtotal: cart.subtotal,
//       deliveryFee: cart.deliveryFee,
//       discount: cart.discount,
//       total: cart.total,
//       promoCode: cart.promoCode // ‚úÖ Tr·∫£ v·ªÅ promoCode ƒë√£ l∆∞u
//     });
//   } catch (err) {
//     console.error('[Apply Discount]', err);
//     res.status(500).json({ error: 'Kh√¥ng th·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√°' });
//   }
// };

// ‚úÖ √Åp d·ª•ng m√£ gi·∫£m gi√° v√†o gi·ªè h√†ng
exports.applyDiscountToCart = async (req, res) => {
  try {
    const { promotionCode } = req.body;
    const userId = req.user._id;

    // 1. T√¨m gi·ªè h√†ng v√† populate cartItems
    const cart = await Cart.findOne({ userId }).populate('cartItems');
    if (!cart) return res.status(400).json({ error: 'Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng' });

    // 2. T√¨m m√£ gi·∫£m gi√°
    const discount = await Discount.findOne({ promotionCode });
    if (!discount) return res.status(404).json({ error: 'M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá' });

    // 3. Ki·ªÉm tra ƒëi·ªÅu ki·ªán m√£ gi·∫£m gi√°
    if (discount.isLock) return res.status(400).json({ error: 'M√£ gi·∫£m gi√° ƒë√£ b·ªã kho√°' });
    if (discount.expiryDate < new Date()) return res.status(400).json({ error: 'M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n' });

    // 4. Ki·ªÉm tra UserDiscount (ng∆∞·ªùi d√πng ƒë√£ s·ª≠ d·ª•ng m√£ n√†y ch∆∞a)
    const userDiscount = await UserDiscount.findOne({ userId, discountId: discount._id });
    if (userDiscount?.isUsed) return res.status(400).json({ error: 'B·∫°n ƒë√£ s·ª≠ d·ª•ng m√£ n√†y' });

    // 5. T√≠nh subtotal hi·ªán t·∫°i c·ªßa gi·ªè h√†ng
    // ƒê·∫£m b·∫£o calculateCartTotals lu√¥n tr·∫£ v·ªÅ { items, subtotal }
    const { items: currentCartItems, subtotal: currentSubtotal } = await calculateCartTotals(cart.cartItems);

    if (currentSubtotal < discount.minOrder) {
      return res.status(400).json({ error: `ƒê∆°n h√†ng ch∆∞a ƒë·∫°t t·ªëi thi·ªÉu ${discount.minOrder.toLocaleString()}ƒë` });
    }

    // 6. √Åp d·ª•ng gi·∫£m gi√° v√† c·∫≠p nh·∫≠t Cart model
    const discountAmount = Math.round(currentSubtotal * (discount.discountPercent / 100));
    cart.discount = discountAmount;
    cart.subtotal = currentSubtotal; // C·∫≠p nh·∫≠t l·∫°i subtotal trong cart
    cart.total = currentSubtotal + cart.deliveryFee - discountAmount;
    cart.promoCode = promotionCode; // ‚úÖ L∆ØU promotionCode v√†o tr∆∞·ªùng promoCode c·ªßa Cart model

    await cart.save(); // L∆∞u c√°c thay ƒë·ªïi v√†o database

    // 7. Ghi nh·∫≠n ng∆∞·ªùi d√πng ƒë√£ d√πng m√£ trong UserDiscount
    await UserDiscount.updateOne(
      { userId, discountId: discount._id },
      { $set: { isUsed: true } },
      { upsert: true } // Upsert: n·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi, n·∫øu c√≥ th√¨ c·∫≠p nh·∫≠t
    );

    // 8. Tr·∫£ v·ªÅ to√†n b·ªô th√¥ng tin gi·ªè h√†ng ƒë√£ c·∫≠p nh·∫≠t
    // ƒê√¢y l√† ph·∫ßn quan tr·ªçng nh·∫•t ƒë·ªÉ frontend kh√¥ng b·ªã NaN
    res.status(200).json({
      message: '√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng',
      items: currentCartItems, // Tr·∫£ v·ªÅ danh s√°ch items ƒë√£ ƒë∆∞·ª£c populate v√† x·ª≠ l√Ω
      subtotal: cart.subtotal,
      deliveryFee: cart.deliveryFee,
      discount: cart.discount, // S·ªë ti·ªÅn gi·∫£m gi√° th·ª±c t·∫ø ƒë√£ √°p d·ª•ng
      total: cart.total, // T·ªïng cu·ªëi c√πng sau gi·∫£m gi√°
      promoCode: cart.promoCode // ‚úÖ Tr·∫£ v·ªÅ promoCode ƒë√£ l∆∞u
    });
  } catch (err) {
    console.error('[Apply Discount]', err);
    // N·∫øu c√≥ l·ªói, ƒë·∫£m b·∫£o tr·∫£ v·ªÅ l·ªói t·ª´ backend ƒë·ªÉ frontend hi·ªÉn th·ªã
    res.status(500).json({ error: err.message || 'Kh√¥ng th·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√°' });
  }
};