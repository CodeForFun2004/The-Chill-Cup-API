// controllers/ai.controller.js
const { getGeminiResponse } = require('../services/gemini.service');

// --- DATABASE INTERACTION ---
// Import c√°c Mongoose model c·ªßa b·∫°n t·ª´ th∆∞ m·ª•c models
// ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ch√≠nh x√°c v·ªõi c·∫•u tr√∫c project c·ªßa b·∫°n
const Product = require('../models/product.model');
const Category = require('../models/category.model');
const Discount = require('../models/discount.model');

/**
 * H√†m l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ c∆° s·ªü d·ªØ li·ªáu.
 * @returns {Promise<Array>} M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m.
 */
async function getProductsFromDB() {
  try {
    const products = await Product.find({})
      .populate('categoryId', 'category description') // L·∫•y t√™n danh m·ª•c v√† m√¥ t·∫£
      .lean();
    return products;
  } catch (error) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ DB:', error);
    return [];
  }
}

/**
 * H√†m l·∫•y d·ªØ li·ªáu danh m·ª•c t·ª´ c∆° s·ªü d·ªØ li·ªáu.
 * @returns {Promise<Array>} M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng danh m·ª•c.
 */
async function getCategoriesFromDB() {
  try {
    const categories = await Category.find({}).lean();
    return categories;
  } catch (error) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu danh m·ª•c t·ª´ DB:', error);
    return [];
  }
}

/**
 * H√†m l·∫•y d·ªØ li·ªáu khuy·∫øn m√£i/voucher t·ª´ c∆° s·ªü d·ªØ li·ªáu.
 * @returns {Promise<Array>} M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng khuy·∫øn m√£i/voucher.
 */
async function getDiscountsFromDB() {
  try {
    const discounts = await Discount.find({}).lean();
    return discounts;
  } catch (error) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu khuy·∫øn m√£i t·ª´ DB:', error);
    return [];
  }
}
// --- END DATABASE INTERACTION ---

/**
 * H√†m chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n Markdown c∆° b·∫£n sang HTML.
 * X·ª≠ l√Ω xu·ªëng d√≤ng, in ƒë·∫≠m v√† danh s√°ch ƒë∆°n gi·∫£n.
 * @param {string} markdownText - Chu·ªói vƒÉn b·∫£n c√≥ ƒë·ªãnh d·∫°ng Markdown.
 * @returns {string} - Chu·ªói vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng HTML.
 */
function convertMarkdownToHtml(markdownText) {
  let htmlText = markdownText;

  // 1. Chuy·ªÉn ƒë·ªïi xu·ªëng d√≤ng (\n) th√†nh <br/>
  htmlText = htmlText.replace(/\n/g, '<br/>');

  // 2. Chuy·ªÉn ƒë·ªïi in ƒë·∫≠m (**) th√†nh <strong>
  // S·ª≠ d·ª•ng regex v·ªõi non-greedy match (.*?) ƒë·ªÉ tr√°nh match qu√° d√†i
  htmlText = htmlText.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

  // 3. Chuy·ªÉn ƒë·ªïi danh s√°ch (*) th√†nh <ul><li>
  // ƒê√¢y l√† m·ªôt c√°ch ƒë∆°n gi·∫£n, c√≥ th·ªÉ c·∫ßn regex ph·ª©c t·∫°p h∆°n cho c√°c tr∆∞·ªùng h·ª£p l·ªìng nhau
  // T√°ch th√†nh c√°c d√≤ng ƒë·ªÉ x·ª≠ l√Ω danh s√°ch
  const lines = htmlText.split('<br/>');
  let inList = false;
  let processedLines = [];

  for (let i = 0; i < lines.length; i++) {
    let line = lines[i].trim();
    if (line.startsWith('* ')) {
      if (!inList) {
        processedLines.push('<ul>');
        inList = true;
      }
      // Lo·∫°i b·ªè d·∫•u * v√† kho·∫£ng tr·∫Øng ƒë·∫ßu d√≤ng, sau ƒë√≥ b·ªçc trong <li>
      processedLines.push('<li>' + line.substring(2).trim() + '</li>');
    } else {
      if (inList) {
        processedLines.push('</ul>');
        inList = false;
      }
      processedLines.push(line);
    }
  }
  if (inList) { // ƒê√≥ng th·∫ª <ul> n·∫øu danh s√°ch k·∫øt th√∫c m√† ch∆∞a ƒë√≥ng
    processedLines.push('</ul>');
  }

  htmlText = processedLines.join(''); // N·ªëi l·∫°i c√°c d√≤ng

  return htmlText;
}


/**
 * Controller ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu chatbot t·ª´ ng∆∞·ªùi d√πng.
 * N√≥ nh·∫≠n prompt t·ª´ request body, l·∫•y d·ªØ li·ªáu t·ª´ DB,
 * v√† g·ª≠i ƒë·∫øn Gemini ƒë·ªÉ nh·∫≠n ph·∫£n h·ªìi.
 * @param {object} req - ƒê·ªëi t∆∞·ª£ng Request c·ªßa Express.
 * @param {object} res - ƒê·ªëi t∆∞·ª£ng Response c·ªßa Express.
 */
exports.askAIAboutCoffeeShop = async (req, res) => {
  const userPrompt = req.body.prompt; // L·∫•y prompt t·ª´ body c·ªßa request

  if (!userPrompt) {
    return res.status(400).json({ error: 'Thi·∫øu prompt t·ª´ ng∆∞·ªùi d√πng' });
  }

  try {
    // L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt t·ª´ database m·ªôt l·∫ßn
    const products = await getProductsFromDB();
    const categories = await getCategoriesFromDB();
    const discounts = await getDiscountsFromDB();

    let contextData = {};
    let systemInstruction = 'B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o t∆∞ v·∫•n th√¥ng tin cho chu·ªói c·ª≠a h√†ng c√† ph√™. H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m, danh m·ª•c, voucher v√† khuy·∫øn m√£i. N·∫øu kh√¥ng c√≥ th√¥ng tin, h√£y n√≥i r·∫±ng b·∫°n kh√¥ng t√¨m th·∫•y.';

    const lowerCaseQuery = userPrompt.toLowerCase();

    // Logic ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng
    if (lowerCaseQuery.includes('s·∫£n ph·∫©m') || lowerCaseQuery.includes('c√† ph√™') || lowerCaseQuery.includes('th·ª©c u·ªëng') || lowerCaseQuery.includes('menu') || lowerCaseQuery.includes('m√≥n')) {
      contextData = products;
      systemInstruction = 'B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o t∆∞ v·∫•n v·ªÅ c√°c s·∫£n ph·∫©m v√† th·ª©c u·ªëng c·ªßa chu·ªói c·ª≠a h√†ng c√† ph√™. H√£y cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m, gi√° c·∫£, m√¥ t·∫£ v√† danh m·ª•c. N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ, h√£y c·ªë g·∫Øng cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m ƒë√≥. N·∫øu kh√¥ng c√≥ th√¥ng tin, h√£y n√≥i r·∫±ng b·∫°n kh√¥ng t√¨m th·∫•y.';
    } else if (lowerCaseQuery.includes('danh m·ª•c') || lowerCaseQuery.includes('lo·∫°i')) {
      contextData = categories;
      systemInstruction = 'B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o t∆∞ v·∫•n v·ªÅ c√°c danh m·ª•c s·∫£n ph·∫©m c·ªßa chu·ªói c·ª≠a h√†ng c√† ph√™. H√£y cung c·∫•p th√¥ng tin v·ªÅ c√°c lo·∫°i s·∫£n ph·∫©m c√≥ s·∫µn. N·∫øu kh√¥ng c√≥ th√¥ng tin, h√£y n√≥i r·∫±ng b·∫°n kh√¥ng t√¨m th·∫•y.';
    } else if (lowerCaseQuery.includes('voucher') || lowerCaseQuery.includes('m√£ gi·∫£m gi√°') || lowerCaseQuery.includes('phi·∫øu ∆∞u ƒë√£i')) {
      contextData = discounts; // S·ª≠ d·ª•ng Discount schema cho c·∫£ voucher
      systemInstruction = 'B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o t∆∞ v·∫•n v·ªÅ c√°c m√£ voucher v√† phi·∫øu ∆∞u ƒë√£i hi·ªán c√≥ c·ªßa chu·ªói c·ª≠a h√†ng c√† ph√™. H√£y cung c·∫•p th√¥ng tin v·ªÅ m√£ voucher, gi√° tr·ªã, ƒëi·ªÅu ki·ªán √°p d·ª•ng, th·ªùi h·∫°n s·ª≠ d·ª•ng v√† ƒëi·ªÉm y√™u c·∫ßu ƒë·ªÉ ƒë·ªïi (n·∫øu c√≥). N·∫øu kh√¥ng c√≥ th√¥ng tin, h√£y n√≥i r·∫±ng b·∫°n kh√¥ng t√¨m th·∫•y.';
    } else if (lowerCaseQuery.includes('khuy·∫øn m√£i') || lowerCaseQuery.includes('∆∞u ƒë√£i') || lowerCaseQuery.includes('gi·∫£m gi√°')) {
      contextData = discounts;
      systemInstruction = 'B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o t∆∞ v·∫•n v·ªÅ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i v√† ∆∞u ƒë√£i gi·∫£m gi√° c·ªßa chu·ªói c·ª≠a h√†ng c√† ph√™. H√£y cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ ch∆∞∆°ng tr√¨nh, ƒëi·ªÅu ki·ªán √°p d·ª•ng, th·ªùi gian di·ªÖn ra v√† ƒëi·ªÉm y√™u c·∫ßu ƒë·ªÉ ƒë·ªïi (n·∫øu c√≥). N·∫øu kh√¥ng c√≥ th√¥ng tin, h√£y n√≥i r·∫±ng b·∫°n kh√¥ng t√¨m th·∫•y.';
    } else {
      // N·∫øu kh√¥ng kh·ªõp v·ªõi b·∫•t k·ª≥ lo·∫°i n√†o, cung c·∫•p t·∫•t c·∫£ d·ªØ li·ªáu c√≥ th·ªÉ v√† h∆∞·ªõng d·∫´n AI tr·∫£ l·ªùi t·ªïng qu√°t h∆°n.
      contextData = {
        products: products,
        categories: categories,
        discounts: discounts,
      };
      systemInstruction = 'B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o t∆∞ v·∫•n th√¥ng tin cho chu·ªói c·ª≠a h√†ng c√† ph√™. H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m, danh m·ª•c, voucher v√† khuy·∫øn m√£i d·ª±a tr√™n d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p. N·∫øu kh√¥ng c√≥ th√¥ng tin c·ª• th·ªÉ, h√£y n√≥i r·∫±ng b·∫°n kh√¥ng t√¨m th·∫•y v√† c√≥ th·ªÉ h·ªèi th√™m ƒë·ªÉ l√†m r√µ √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng.';
    }

    // G·ªçi d·ªãch v·ª• Gemini ƒë·ªÉ l·∫•y ph·∫£n h·ªìi
    const aiResponse = await getGeminiResponse(contextData, userPrompt, systemInstruction);

    // --- B∆Ø·ªöC M·ªöI: ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp tr√™n UI ---
    const formattedResponse = convertMarkdownToHtml(aiResponse);
    // --- K·∫æT TH√öC B∆Ø·ªöC M·ªöI ---

    res.json({ answer: formattedResponse }); // Tr·∫£ v·ªÅ ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng HTML
  } catch (error) {
    console.error('üî• L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω chatbot:', error);
    res.status(500).json({ error: 'L·ªói n·ªôi b·ªô khi x·ª≠ l√Ω y√™u c·∫ßu chatbot.' });
  }
};
